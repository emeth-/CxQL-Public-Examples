/*
    Clearing false positives of the base rule if the project contains build files for libraries
*/

// Search for the release method among all methods in Gradle files
CxList releaseMethod = Find_Gradle_Method("release");

// All objects from build.gradle files
CxList gradleBuildObjects = Find_Gradle_Build_Objects();

// Search for what is inside the "release" method among all objects from build.gradle files
CxList methodInvokesUnderRelease = gradleBuildObjects.FindByType(typeof(MethodInvokeExpr)).GetByAncs(releaseMethod);

// Search inside gradle files for the string "com.android.library" - this means that this file belongs to a library and should be excluded from the rule
CxList android_library = gradleBuildObjects.FindByName("com.android.library");

// Initialize an empty array
List<string> libraries_path = new List<string> {};

// Iterate through all found "child" files
foreach(CxList library in android_library)
{
    // Get the path to each file
	string file_name_library = library.GetFirstGraph().LinePragma.FileName;
    
    // Add it to our array
	libraries_path.Add(file_name_library);
}

// Search for all calls to enable obfuscation in release settings
CxList minifyEnabled = methodInvokesUnderRelease.FindByShortName("minifyEnabled");

// Get the parameters of these calls
CxList minifyValue = gradleBuildObjects.GetParameters(minifyEnabled, 0);

// Search among them for enabled ones
CxList minifyValueTrue = minifyValue.FindByShortName("true");

// A bit of magic if not found in the standard way :D
if (minifyValueTrue.Count == 0) {
	minifyValue = minifyValue.FindByAbstractValue(abstractValue => abstractValue is TrueAbstractValue);
} else {
    // If found, keep the previous result
	minifyValue = minifyValueTrue;	
}

// If no such methods are found
if (minifyValue.Count == 0)
{
    // For more accurate display of the trigger location in the file, search for either buildTypes or android
	CxList tempResult = All.NewCxList();
	CxList buildTypes = Find_Gradle_Method("buildTypes");
	if (buildTypes.Count > 0) {
		tempResult = buildTypes;
	} else {
		tempResult = Find_Gradle_Method("android");
	}
	
	// For each found trigger location, determine if it is a child or main build file
	foreach(CxList res in tempResult)
	{
        // Determine in which file the buildType or android methods were found
		string file_name_result = res.GetFirstGraph().LinePragma.FileName;
        
        // If such a file is not in our list of "child" files, then it is the main file and can be added to the result
		if (libraries_path.Contains(file_name_result) == false){
			result.Add(res);
		}
	}
}