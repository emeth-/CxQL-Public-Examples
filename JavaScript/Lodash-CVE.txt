/*
    Search for the use of vulnerable methods in the Lodash library
*/

// Find all strings: where the string lodash appears (assuming this is the import declaration of the library)
CxList lodash_strings = Find_String_Literal().FindByShortName("*lodash*");

// Find all data: that interacts with these strings
CxList data_on_lodash = All.InfluencedBy(lodash_strings);


// Define a list of vulnerable methods
List<string> vulnerable_methods = new List<string> {"template", "*set"};

// Find all our vulnerable methods listed in the vulnerabilities and filter them only where they were called
CxList vulnerableMethods = All.FindByShortNames(vulnerable_methods).FindByType(typeof(MethodInvokeExpr));

// Find all data that interacts with these methods
CxList vulnFlow = All.InfluencedBy(vulnerableMethods);

// If there is an intersection on this data - add to the result
result = vulnFlow * data_on_lodash;

// Form a list of paths we have already passed to filter out duplicates in the future
List<string> lodash_result_path = new List<string> {};
foreach(CxList lodash_result in result)
{
	string file_name = lodash_result.GetFirstGraph().LinePragma.FileName;
	lodash_result_path.Add(file_name);
}

// The following part relates to html files, as we cannot trace where the call comes from in them
// Form an array of file paths to ensure that the vulnerable methods were triggered in the files where lodash is declared
List<string> lodash_path = new List<string> {};
foreach(CxList string_lodash in lodash_strings)
{
	string file_name = string_lodash.GetFirstGraph().LinePragma.FileName;
	lodash_path.Add(file_name);
}

// Iterate over all vulnerable methods and make sure they are called in the same files as the lodash declaration/inclusion
foreach(CxList method in vulnerableMethods)
{
	string file_name_method = method.GetFirstGraph().LinePragma.FileName;
	if (lodash_path.Contains(file_name_method) == true && lodash_result_path.Contains(file_name_method) == false){
		result.Add(method);
	}
}

// Remove all UnknownReferences (due to incorrect JS parsing) and leave the "longest" path if such are found
result = result.ReduceFlow(CxList.ReduceFlowType.ReduceSmallFlow) - result.FindByType(typeof(UnknownReference));